ЗАКЛЮЧЕНИЕ

В ходе выполнения лабораторной работы мы успешно создали:

1. Уязвимую программу (vuln.c) с функцией gets(), подверженной переполнению буфера.
2. Различные версии эксплойта:
   - exploit.py - простая версия
   - auto_exploit.py - автоматизированная версия
   - final_exploit.py - финальная версия с поддержкой разных архитектур

3. Подробный отчет о работе (report.txt) с объяснением уязвимости и методов атаки.

Основные технические сложности, с которыми мы столкнулись:
1. ASLR (Address Space Layout Randomization) - адреса функций меняются при каждом запуске.
2. Особенности выравнивания стека в ARM64 архитектуре.
3. Защитные механизмы современных операционных систем.

Для успешной эксплуатации мы использовали следующие приемы:
1. Вывод адресов функций при запуске программы.
2. Генерация нескольких вариантов эксплойта с разными смещениями.
3. Адаптация полезной нагрузки под архитектуру системы.

Эта лабораторная работа демонстрирует важность безопасного программирования и 
понимания механизмов защиты от распространенных уязвимостей. Разработчикам следует
избегать использования небезопасных функций, таких как gets(), и применять
современные защитные механизмы при компиляции программ. 